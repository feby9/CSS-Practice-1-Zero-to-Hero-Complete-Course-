body {
    background: linear-gradient(to bottom, rgb(173, 216, 230) , rgba(173, 216, 230, 0.4));
    text-transform: capitalize;
    text-align: center;
    font-size: 1.15em;
    font-family: "Arial", sans-serif;
}

/* padding: top right bottom left OR 
padding: all 
margin: top&bottom left&right 

2 types of display: block, and inline.
float: where.
*/

.flexwrap, .flexwrap1 {
    background-color: beige;
    border: 10px solid green;
    margin: 20px 40px;
}

.flexwrap {
    height: 500px;
    width: 60%;
    padding: 80px 40px 0px 30px;
}

/* flex-wrap's default is nowrap. Wrap will make the items
inside the container from a single-line into a multi-line.
That means, if an item is out of bounds, a newline occurs and 
all items will be placed evenly on 2 or more lines.

justify content. If you want stretched out, use space-between.
If you want a centered flexbox, use space-around.

align-items. Default is stretched. Baseline will, no matter the
vertical size, put everything in the same line.

if you want to center everything, just set both of those two
properties above to center.

flex: grow shrink basis
flex grow 5 means that item will take 5 times more space than 
the rest of the items. Flex grow has to be defined for every items
because it is relative to the rest of the items. 
Default flex grow is 0. Default shrink is 1.
If you don't want something to shrink, set it to 0.

align-self is for items and will override align-items.
align-self: where. Same as align-items. Can't use stretcehed
baseline.
*/

.flexwrap1 {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: space-around;
    align-items: baseline;
    height: 500px;
}

.flexitem1 {
    background-color: royalblue;
    margin: 5px;
    height: 70px;
    width: 80px;
    flex: 1 1 100px;
}

.flextitle {
    background-color: brown;
}


/*GRID 
Focuses on width like flex, BUT IT ALSO focuses on height.
Template column and rows to initialize rows and columns.

For grid-template-columns: column-size;
Just type the sizes. And based on the size that we input, it will
decide on the number of rows that we want. 
Each column sizes are separated by space.

grid-template-rows: row-size;
Works exactly the same way.

auto will size them evenly based on available spaces.
I like auto and might use it a lot in the future.

Row and Column Gap.
gap: row column;

Real true power of grids: Rearrange and Resize items based on
start point and end point of items.
Lines are THE MOST IMPORTANT part of grid.
To do this, first, we use grid-column: start / end; 
and grid-row: start / end; in html.
for example, grid-column: 1 / 3; to resize that particular column 
from the start position of col1 into col3.
another example, grid-column: 1 / span 2; to resize that column
from the start position of col1 into 2 more colsize. 
Both of the above code gives the same results.
Span is easier to use.

Grid area for faster Line settings.
grid-area: row-start / column-start / row-end / column-end;
e.g. grid-area: 2 / 1 / span 2 / span 3;
*/

.gridwrap1 {
    background-color: seagreen;
    height: 500px;
    display: grid;
    grid-template-columns: 50px 150px auto;
    /* column-gap: 150px; */
    grid-template-rows: 50px 250px;
    /* row-gap: 100px; */
    /* gap: 100px 150px; */
    /* justify-content: space-evenly;
    align-content: space-around; */
}

.griditem1 {
    margin: 5px;
}


/* Transition 
transition: property1,property2,property3 duration type delay;
property1,2,3,4,etc. are properties-you-want-to-use-transition.
if you want to choose all propertise, then just type all in their place 
[not recommended], but is still useful.
3 Most common use, fastest to slowest: ease > linear > ease-in-out

Prefix for maximum browser support, from the most important:
-webkit-property for safari and one other browser(?)(IE?).
-moz-property for mozilla.
-o-property for opera.
replace "property" with any property you want to set.
*/

.submit-button {
    margin: 20px 10px;
    padding: 10px 15px;
    border: none;
    text-decoration: none;
    font-family:Arial, Helvetica, sans-serif;
    font-weight: 600;
    font-size: medium;
    color:black;
    background-color:darkorange;
    transition: background-color,padding 200ms ease-in-out 100ms;
}

.submit-button:hover {
    background-color:chartreuse;
    padding: 20px 30px;
}


/* Usually the best way is to use height is with absolute units
like pixels. And relative units for width like % or vw. */

/* font-weight 400 is the "normal" weight 

font-family:
serif fonts have these kind-of underline in some letters.
serif is usually used for academic papers, printed texts, etc..
But serif is hard to read on computers or any digital media.
Serif examples: Times New Roman (most famous), Georgia

So we use sans serif, which doesn't have those underline
for digital texts.
Plus, MOST websites like google and facebook use sans serif.
So we'll be using sans serif here.
Sans serif examples are: Arial, Calibri (Pretty common in gdocs)

Monospace are when every letter will take the same space.
Monospace examples: Courier new
*/

.wrap1, .wrap2, .wrap3 {
    height: 100px;
    width: 50%;
}

/* border: size style color 
size usually 1 to 4 px,
style usually solid.*/

.wrap1 {
    background: linear-gradient(to top right, red, green, steelblue, blue);
    border: 10px solid rgb(154, 174, 200);
    float: right;
}

.wrap2 {
    background: linear-gradient(215deg, rgb(70, 130, 180), rgba(70, 130, 180, 0.1));
}

.wrap3 {
    background: radial-gradient(circle, red 10%, blue 40%,rgba(70, 130, 180, 0.1) 55%);
    display: inline-block;
}

h2:hover {
    color: white;
}

li:first-child {
    color: steelblue;
}

li:nth-child(2) {
    color:tomato;
}

li:only-child {
    color: purple;
}

/* + is for something that's directly after.
~ is for something that's after, wherever it is. 
And both only works if they have the same parent.*/
h2 + p {
    color: green;
}

p ~ button {
    color:coral;
}

/* This means "For every DIRECT CHILD li inside an ul"
This is more specific than general selector. */
ul > li {
    color:darkgoldenrod;
}

/* This means ANY li that's the descendants
of an ul*/
ul li {
    color:darkmagenta;
}

/* Attribute Selector 
^ means starts with this value
$ means ends with this value
* means anywhere as long as it contains this value
| means "or".
~ means exactly equals? I'm not sure
*/
img[src^="/img/"] {
    border: 10px solid black;
}

/* If this h2 selector uses an |= it's supposed to mean
"Find every h2 where the class is directly equals to 
article-subtitle OR article with a dash "-"".
But that didn't work in my case. Nothing changes
and I don't know why. So I'll stick with ~= for now.
*/
h2[class~=article-subtitle] {
    color:blueviolet;
}

.cta, .text {
    color: rgb(200, 148, 30);
    font-weight: 400;
}


#google-link:link {
    color:blue
}

#google-link:visited {
    color: red;
}

.title {
    color:red;
}

#title-description {
    color: blue;
}

